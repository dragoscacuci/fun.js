{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Maintaining state
\b0 \
\
Like objects, closures are a mechanism for containing state. In JavaScript, a closure is created whenever a function accesses a variable defined outside the immediate function scope. \
Closures can be created by simply defining a function inside another function, and exposing the inner function, either by returning it or by passing it to another function. \
The variables used by the inner function will be available to it, even after the outer function has finished running. \
\
Closures can be used in JavaScript to create data privacy using a factory function.\
\
const counter = function counter()\{\
	let count = 0;\
\
	return \{\
		getCount: function getCount() \{\
			return count;\
		\},\
		increment: function increment() \{\
			count += 1;\
		\}\
 	\};\
\}}