{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red53\green53\blue53;}
{\*\expandedcolortbl;;\cssrgb\c27059\c27059\c27059;}
\paperw11900\paperh16840\margl1440\margr1440\vieww16600\viewh18260\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b\fs24 \cf2 Chapter 2 JavaScript, a multi paradigm programming language\

\b0 \
JavaScript is a multi-paradigm programming language. \
It\'92s design goal is to allow programmers to use the most suitable programming style, considering that no single paradigm solves all problems in the easiest or most efficient way. \
A programming paradigm is a style or way of programming. \
\
Some common programming paradigms are: \
- Imperative: programming with and explicit sequence of commands that update state\
- Declarative: Programming by specifying the result you want, not how to get it\
- Procedural: Imperative programming with procedure calls\
- Functional: Programming with function calls that avoid any global state\
- Object-Oriented: Programming by defining objects that send messages to each other. Objects have their own internal (encapsulated) state and public interfaces. Object orientation can be: \
	- Class-based: Objects get state and behavior based on membership in a class\
	- Prototype-based: Objects get behavior from a prototype object\
- Event-driven: Programming with emmiters and listeners of asynchronous actions\
- Logic: Programming by specifying a set of facts and rules. An engine infers the answers to questions. \
- Aspect-Oriented: Programming cross-cutting concerns applied transparently \
\

\b Paradigms supported by JavaScript
\b0 \
\
JavaScript offers something other languages lack: 
\b freedom\

\b0 JavaScript is one of the most important programming languages of all time, not because of it\'92s popularity, but because it popularized two paradigms which are extremely important for the evolution of programming:\
- Prototypal Inheritance (objects without classes and prototype delegation, or OLOO - Object Linking to Other Objects)\
- Functional Programming (enabled by lambdas with closure)\
\
In an article from the JavaScript Scene, Eric Elliot, author of \'93Programming JavaScript Applications\'94 calls these two paradigms 
\b the two pillars of JavaScript
\b0 .\
\
In \'93The two pillars of JavaScript\'94, Eric Elliot refers to the Functional Paradigm as the \'93programming pradigm that is going to play a much bigger role going forward as modern programming languages add more and more features that reduce boilerplate, repetition and syntax noise\'94.\
In this presentation, we will discuss all of these, along with other benefits of FP.\
\
Funtional programming is a natural fit for JavaScript since it offers a few important features: first-class functions, closures and simple lambda syntax. \
JS also makes it easy to assign functions to variables, pass them to other functions as arguments, returning functions from other functions, composing functions, along with features that allow to return new objects and arrays rather than manipulating properties of those passed in as arguments. \
\
The essence of FP is simple, programs are build mostly with a handful of small, reusable and predictable pure functions.\
\
Most programs need to produce output, so complex programs usually can\'92t be composed using only pure functions, but whenever it\'92s practical, it\'92s a good idea to make your functions pure.}