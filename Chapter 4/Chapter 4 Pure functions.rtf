{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww16600\viewh18260\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Chapter 4 Pure functions\
\
Functional programming is based on a simple premise with heavy implications: programs are constructed using pure functions.\
A pure function is a function that has no side effects. A function has side effects if it does something other than simply return a result.\
\
Examples of side effects:\
 - modifying a variable\
 - setting a field on an object\
 - throwing an exception\
 - reading user input\
 - printing to console\
\
Because of their modularity, pure functions are easier to test, reuse, paralelize, generalize and reason about.\
\

\b What exacty is a pure function?
\b0 \
\
A function f with input type A and output type B is a computation that relates every value a of type A to exactly one value b of type B such that b is determined solely by the value of a.\
\
An expression e is said to be referentially transparent if, for all programs p , all occurencies of e in p can be replaced by the result of evaluating e without affecting the meaning of p.\
\
A function is considered pure if calling it with referentially transparent arguments is also referentially transparrent.\
\
For example if we had the function definition add(a, b) => a + b and the function call add(1, 2) in a program, we could simply replace the function call with the value 3 and it wouldn\'92t change the meaning of the program. \
\
A pure function can be considered a mapper between input arguments and return values, meaning that for each set of inputs, there\'92s only one possible output.\
\

\b Purity by convention\

\b0 Unlike other FP languages, JavaScript does not enforce purity, and it must be achieved by convention.\
If the application is not mostly built by composing pure functions, it\'92s not FP. It\'92s really easy in JavaScript to get off track by accidentally creating and using impure functions.\
\

\b Immutability by convention\

\b0 An immutable object is an object whose state cannot be modified after it\'92s created. \
Some FP languages disable mutations. Instead of mutating an existing data structure, such as an array or an object, expressions evaluate to new data structures. \
Most functional languages use trie data structure under the hood, which feature structural sharing, meaning that the old object and the new object share references to the data that is the same.\
\
JS support for Immutability \
\
Objects: \
- Object.assign\
- Spread operator\
\
Arrays\
Adding elements: spread operator\
Removing element: filter\
Changing element: map\
Concatenating arrays: spread operator\
Sorting: slice + sort\
\
ImmutableJS\
{\field{\*\fldinst{HYPERLINK "https://facebook.github.io/immutable-js/"}}{\fldrslt https://facebook.github.io/immutable-js/}}\
ImmutableJS provides many immutable data structures like List, Stack, Map, OrderedMap, Set, OrderedSet and Record.\
These data structures are highly efficient on modern JavaScript VMs by using structural sharing via hash maps tries and vector tries minimizing the need to copy or cache data.\
\

\b Mention lazy Seq in ImmutableJS\
\
Example: Sorting an array\
\
Benefits of using pure functions\

\b0 - easier to reason about: because a pure function has no side effects, it\'92s easy to get an idea of what it does by just looking at it\'92s signature\
- easier to combine: because the output of a pure function depends only on input, they are easy to combine together into simple solutions (E.g. chain of function calls)\
- easier to test: because the output of the function depends only on the function\'92s input parameters, you don\'92t have any dependencies that need to be mocked\
- easier to debug: because the output of the function depends only on the function\'92s input parameters, you don\'92t need to look outside the function\'92s scope to debug it
\b \
}