{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red53\green53\blue53;}
{\*\expandedcolortbl;;\cssrgb\c27059\c27059\c27059;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww16600\viewh18280\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Chapter 1 Functional programming\
\

\b0 In the beginning of the computer revolution, Alonzo Church did groundbreaking work in theoretical computer science. \
Together with his student and collaborator, Alan Turing, they created a theory of computable functions called the Church-Turing Thesis, which described the nature of computable functions.\
\
Two fundamental computational models have emerged: the turing machine and the lambda calculus. \
\
The turing machine is used as the baseline of requirements for modern programming languages. \
A programming language is said to be Turing complete or computationally universal if it can be used to simulate any Turing machine.\
\
The first famous example of turing-complete system was lambda calculus, a formal system in mathematical logic for expressing computation based on function abstraction and application using variable binding and substitution, which inspired Lisp, the first languages to support functional programming.\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
Functional programming produces programs by composing mathematical functions and avoids shared state and mutable data.\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f1 \cf2 In functional programming, the output value of a function depends only on the arguments that are passed to the function:\
- Every time a function is called with the same values for it\'92s arguments, it will produce the same result f(x)\
- Different than procedures that depend on a local or global state which may produce different results at different times when called with the same arguments but a different program state\
\
- Example: 
\b TODO: give two Counter examples in JavaScript (one that only depends on the arguments and the other one that depends on the state as well)\
Example E1.1 Counter with side effects\
Example E1.2 Counter without side effects\

\b0 \
In the functional example, the data is not mutated. \
In contrast, imperative programming changes states with commands in the source code. A simple example would be an assignment.\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97 \
\
Imperative programming has functions, not in the mathematical sense, but in the sense of subroutines. \
Since they may have side effects that change the value of the program state, functions without return values will make sense.\
They lack referential transparency, i.e. the same expression can result in different values depending on the state of the executing program.\
\
Eliminating side effects can make it easier to understand and predict the behaviour of a program (key motivations for the development of functional programming).\
A function or expression is said to have a side effect if it modifies some state outside its scope, or has an observable interaction with it\'92s calling functions or the outside world besides returning a value.\
Examples of side effects include: modifying a global variable, modifying one of the arguments, raise an exception, write data to a display or file, read data or call other side-effecting data.\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97 \
\
In the last chapter? \
\
Benefits: \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl0\cf2 {\listtext	\uc0\u8259 	}Unit Testable. \
\pard\tx940\tx1440\pardeftab560\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf2 {\listtext	\uc0\u8259 	}Example E1.3 Unit testing functions with side effects\
{\listtext	\uc0\u8259 	}Example E1.3 Unit testing functions without side effects\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl0\cf2 {\listtext	\uc0\u8259 	}
\b TODO: what are the other benefits
\b0 \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 Functional programming has it\'92s origins in lambda calculus (a formal system to investigate computability, function definition, function application and recursion)\
\
}